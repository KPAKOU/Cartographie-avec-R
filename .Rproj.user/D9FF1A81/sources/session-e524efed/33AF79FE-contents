---
output:
  word_document: default
  html_document: default
---
# (PART) Créer des cartes sous R {-}

# Créer des cartes statiques avec {ggplot2}    

## Librairies

Nous allons utiliser les librairies suivantes :

```{r pkg_chap_12_ggplot, message=FALSE, warning=FALSE}
# CRAN
library(cowplot)
library(ggspatial)
library(sf)
library(tidyverse) #comprend ggplot2
library(tmap)
# Github
library(COGiter)    # remotes::install_github("MaelTheuliere/COGiter")
library(gouvdown)   # remotes::install_github("spyrales/gouvdown")

# Gitlab-forge
library(mapfactory) 
#remotes::install_gitlab("dreal-pdl/csd/mapfactory", host = "gitlab-forge.din.developpement-durable.gouv.fr")
```
```{r}

```

## Importation des données spatiales de classe sf du senegal

```{r}
#les données geometrique des unités spatiales
sen_sf0 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_0.shp")
sen_sf1 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_1.shp")
sen_sf2 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_2.shp")
sen_sf3 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_3.shp")
sen_sf4 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_4.shp")


#les données attributaires relatives aux données spatiales
sen_sf0_1 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_0.dbf")
sen_sf1_1 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_1.dbf")
sen_sf2_1 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_2.dbf")
sen_sf3_1 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_3.dbf")
sen_sf4_1 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_4.dbf")


#les index des unités spatiales
sen_sf0_2 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_0.shx")
sen_sf1_2 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_1.shx")
sen_sf2_2 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_2.shx")
sen_sf3_2 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_3.shx")
sen_sf4_2 = read_sf("C:/Users/HP/Desktop/Mon_semestre_2/TP_CARTO_R/Mon_projet/Données/gadm41_SEN_shp/gadm41_SEN_4.shx")

```

```{r, eval=TRUE, echo=FALSE}
theme_set(theme_minimal())
```

## Introduction : les cartes statiques en R

<br>
Il existe de nombreuses manières de visualiser des données géographiques dans R. 

En utilisant la fonction `plot()` basique de R sur un objet sf, R nous propose un rapide aperçu de la couche et de ses attributs :
```{r}
plot(sen_sf0)
```

Le package `{mapview}` permet également d'afficher un aperçu de couche très rapidement, posé sur un fond de carte Open street map.
```{r}
library(mapview) 
mapview(sen_sf1)
```

Le résultat est un widget html, explorable, zoomable, cliquable. 
Bien que conçu principalement pour faciliter l'exploration de données spatiales.

Pour mettre en page des cartes, 3 packages se distinguent :   

- `{ggplot2}`, 
- `{tmap}`,  
- et `{mapsf}`.

`{ggplot2}` est un package du tidyverse, qui propose une syntaxe cohérente entre dataviz et cartoviz.

`{tmap}` a longtemps été plus complet et plus simple que ggplot2. 

Le [package `{mapsf}`](https://riatelab.github.io/mapsf/){target="_blank"} a été développé par Timothé Giraud du CNRS. 
Ses fonctionnalités sont assez complètes pour des rendus graphiques très aboutis. De plus, le package est relativement léger.



### `{ggplot2}` : les concepts clefs

Pour construire un graphique avec `{ggplot2}` il faut lui déclarer plusieurs éléments : 

- **la donnée à représenter** : ggplot2 permet de travailler sur des vecteurs, des dataframes, des tibbles, ou des données spatiales ;

- le **mapping** : on définit dans l'aesthetic (ou aes) le **mapping**, c'est à dire ce que l'on veut représenter qui **dépend des variables** (quelle variable sur l'axe x, sur l'axe y, quelle variable pour définir une graduation de couleurs...), par exemple : 
  + `x`, `y` : pour les variables qui seront représentées selon les axes x et y ;
  + `colour` : pour la variable qui sera représentée par la couleur (contour),  
  + `fill` : pour la variable qui sera représentée par la couleur de remplissage ;
  + `shape` : pour la variable qui sera représentée par la forme du point,
  + `size` : pour la variable qui sera représentée par la taille du point ou de la ligne,
  + `alpha` : pour la variable qui sera représentée par la transparence du remplissage.

- les autres **paramètres** : on définit en dehors de l'aesthetic les autres paramètres graphiques constants (par exemple : je veux que toutes mes lignes soient rouges ou de taille 2 pixels) ;

- le **layer (forme ou calque géométrique)** : on définit sous quelle représentation graphique on représente les paramètres précédents (nuages de points, diagramme barres,...). Sous ggplot, ces fonctions sont de la forme `geom_XX()` ;

- le **système de coordonnées** : on définit quel type de système de coordonnées (polaire, cartésien...) on souhaite utiliser pour visualiser nos données. Par défaut ggplot utilise les coordonnées x, y cartésiennes. Si besoin de changer, on spécifie le système de coordonnées à l'aide d'une fonction de type `coord_XX`.

L'écriture type d'un graphique ggplot sera donc : 

```{r, echo=TRUE, eval=FALSE}
ggplot(data = <DATA>) + 
  <CALQUE_GEO>(mapping = aes(<MAPPINGS>), ...=<PARAMS>)
```

Voici un exemple appliqué au jeu de données d'exemple de R `iris` :

```{r, echo=FALSE}
glimpse(iris)
```


```{r, echo=TRUE}
ggplot(data = iris) + 
  geom_point(mapping = aes(x = Sepal.Length, y = Petal.Length, color = Species))
```

Les fonctions de création de calques `geom_XX` incluent une transformation statistique par défaut (identité, décompte, quantile, classification...) grâce à leur paramètre "stat", qu'il est possible de modifier au besoin.  
Par exemple la fonction `geom_bar()` est associé par défaut à la transformation `stat_count()` qui décompte les observations. 

```{r, echo=TRUE, fig.asp=0.5, fig.height=3}
ggplot(data = iris) + 
  geom_bar(mapping = aes(x = Species, fill = Species))
```

On peut modifier ici le paramètre `stat` de `geom_bar()` pour afficher la moyenne des longueurs de sépales par espèces :

```{r, echo=TRUE}
ggplot(data = iris) + 
  geom_bar(mapping = aes(x = Species, y = Sepal.Length, fill = Species), stat = "summary")
```

Les fonctions ggplot de création de calques géométriques de type `geom_XX(stat = "YY")` sont équivalentes aux fonctions `stat_YY(geom = "XX")`.

```{r, echo=TRUE}
ggplot(data = iris) + 
  stat_summary(mapping = aes(x = Species, y = Sepal.Length, fill = Species), geom = "bar")
```

En résumé et en image :   

![](pic/ggplot_principe.png)


### {ggplot2} pour les cartes

Pour visualiser des données spatiales, ggplot propose maintenant une série de fonctions `geom_sf`, `stat_sf` et `coord_sf` adaptées aux dataframes de type sf. 

Pour les visualisations les plus simples, seule `geom_sf()` suffit, ggplot utilise silencieusement les fonctions de transformation stat et de coordonnées appropriées.

```{r}
ggreg <- ggplot(sen_sf1) + 
  geom_sf(color = "white", fill = "lightblue")

ggreg
```

Quatre types de calques géographiques sont utilisables : 

- `geom_sf()` : pour visualiser nos objets géographiques tels quels,  
- `geom_sf_label()` : pour étiqueter nos objets géographiques,  
- `geom_sf_text()` : pour annoter nos objets géographiques,   
- `stat_sf_coordinates()` : pour transformer des géométries complexes (lignes, polygones) en points avant de tracer le calque.

Ils n'acceptent qu'une seule variable de coordonnées dans le mapping esthétique : celle de la géographie de nos données spatiales.
Il n'est pas besoin de le préciser, quelque soit le nom du champ contenant les coordonnées géo s'il n'y a qu'un champ géo. 
Dans le cas contraire, on indique le nom de la colonne de coordonnées à utiliser dans l'aesthetic `aes(geometry = mon_champ_geo)`.

Les autres paramètres esthétiques acceptés par les fonctions de traçage de calques sf sont par exemple : 

- `colour` : pour une variable qui sera représentée par la couleur (contour),   
- `fill` : pour une variable qui sera représentée par la couleur de remplissage,  
- `shape` : pour une variable qui sera représentée par la forme du point,  
- `size` : pour une variable qui sera représentée par la taille du point ou de la ligne,  
- `alpha` : pour une variable qui sera représentée par la transparence du remplissage.  

`geom_sf_label()` (étiquette) et `geom_sf_text()` (texte simple) acceptent en plus le paramètre `label` pour ajouter des étiquettes ou des annotations à notre fond de carte.

```{r, echo=FALSE}
ggreg <- ggreg + theme_void(base_size = 11)

plot_grid(ggreg + geom_sf_text(aes(label = NAME_1)) 
          + labs(title = "region du senegal") +
            coord_sf(xlim = c(-19, -11), ylim = c(17,11)))
          
 
```
```{r}
ggreg <- ggreg + theme_void(base_size = 11)

plot_grid(ggreg + geom_sf_label(aes(label = NAME_1)) + labs(title = "region du senegal"))
 
```


Les fonctions `geom_sf_text()` et `geom_sf_label()` sont associées à la fonction de transformation `stat_sf_coordinates()` qui par défaut renvoie un point au centre de nos objets géographiques pour placer l'annotation textuelle (grâce à la fonction `sf::st_point_on_surface()`).

Pour le système de coordonnées, la fonction `coord_sf()` va chercher celui de nos données spatiales pour l'appliquer au graphique. Elle peut servir à définir celui qu'on l'on souhaite utiliser pour la visualisation, en spécifiant le datum (les axes représentés).  
`coord_sf()` permet également de *zoomer* sur la carte en spécifiant les bornes x et y de la carte, ou également de définir le titre des axes.


## Faire des cartes avec {ggplot2}


### Préparation des données 

Comme avec d'autres packages, la première étape consiste à préparer le jeu de données à visualiser, c'est à dire d'associer les variables à analyser à leur géographie. 


```{r echo=TRUE, eval=TRUE, warning=FALSE}
# systeme de coordonnées avec tmap  
data("World")
wgs_84 <- tm_shape(World, projection = st_crs(4326)) + 
  tm_polygons() + 
  tm_layout("Le monde en projection WGS84", inner.margins=c(0,0,.1,0), title.size=.8)

robin <- tm_shape(World, projection = st_crs("+proj=wintri")) + 
  tm_polygons() +
  tm_layout("Le monde en projection Winkel-Tripel", inner.margins=c(0,0,.1,0), title.size=.8)
uemoa_sf = World %>% 
  filter(name %in% c("Mali", "Senegal", "Benin", "Burkina Faso", "Togo", "Niger", "Guinea-Bissau", "Cote d'Ivoire") )
  # calcul des indicateurs a représenter
  uemoa_sf = mutate(uemoa_sf, poids_pop_a_part = pop_est / sum(pop_est) * 100)
         
```


### Les cartes choroplèthe

Le premier exemple que nous allons pouvoir voir, c'est une carte choroplèthe, càd en aplat de couleur, adaptée à la représentation d'indicateurs intensifs (%, densité...).

```{r cart_choro, fig.height=5, fig.width=12, cache=TRUE}
ggplot(data = uemoa_sf) +
  geom_sf(mapping = aes(fill = pop_est_dens), color = "white")
```


### Les cartes à ronds proportionnels

La fonction ***stat_sf_coordinates()*** permet d'extraire les coordonnées d'un objet 'sf' avant de produire le calque.
Ainsi un rond proportionnel peut être attribué à un polygone.  
On ajoute le calque des ronds proportionnels au dessus de celui des polygones en enchainant les fonctions de traçage des calques avec le `+`.

```{r cart_prop, fig.height=5, fig.width=12, cache=TRUE}

carte_ronds_prop <- ggplot(data = uemoa_sf) +
  geom_sf() +
  stat_sf_coordinates(mapping = aes(size = pop_est, color = poids_pop_a_part))

carte_ronds_prop

```


### L'habillage simple

#### Titre et libellé des axes

Chaque nouvel élément graphique est à ajouter sous forme de calques (layers).
Pour les titres, nous utilisons la fonction `labs()` qui permet de donner un titre à tous les éléments possibles de l'aesthetic, ainsi que le titre (`title`), le sous-titre (`subtitle`) et le bas de page (`caption`).

```{r, echo=TRUE, eval=TRUE, fig.height=5, fig.width=12, warning=FALSE}
carte_ronds_prop +
  labs(
    title = "Population par pays de l'uemoa",
    size = "Nombre d'habitants",
    color = "Poids population\ncomptée à part (%)"
  
  )
```

A noter qu'il existe plusieurs autres façons de spécifier ces éléments par des fonctions spécifiques: `ggtitle()`, `xlab()`, `ylab()`, ...

#### Légende

Les fonctions `guide_xx()` et `guides()` permettent de modifier finement la légende.
Les guides peuvent être spécifiées dans chaque `scale_` ou dans une instruction `guides`.

```{r, echo=TRUE, eval=TRUE, fig.height=5, fig.width=10, warning=FALSE}
carte_ronds_prop2 <- carte_ronds_prop +
  labs(
    title = "Population par pays",
    size = "Nombre d'habitants",
    color = "Poids population\ncomptée à part (%)"
  ) +
  guides(color = guide_legend(
    direction = "horizontal",
    order = 1,
    title.position = "top",
    title.hjust = 0.5,
    nrow = 1,
    label.position = "bottom"
  )) +
  theme(legend.position = "left")

carte_ronds_prop2
```


### Les thèmes

Pour modifier simplement la position de la légende, c'est la fonction [`theme()`] qu'il faut utiliser.

`theme()` permet de créer des templates, c'est à dire de définir tout ce qui n'est pas lié directement aux données sur un graphique, notamment: 

- la position, taille, couleur et police des éléments textuels

- la couleur des grilles primaires et secondaires du graphique

Pour unifier un document, il est vivement conseillé de recourir à un thème.

Il existe des [thèmes prédéfinis](http://ggplot2.tidyverse.org/reference/index.html#section-themes) dans ggplot que l'on peut déjà utiliser.
Par exemple: `theme_classic()`, `theme_bw()`, `theme_dark()`, ...

Pour les cartes, les thèmes `theme_minimal()` ou `theme_void()` sont particulièrement indiqués.  

Le `theme_gouv_map()` de `{gouvdown}` est tout indiqué pour les services de l'État. 
Il ne gère pas les couleurs par défaut, mais tout le reste l'est. 
La taille des éléments de texte reste paramétrable par l'utilisateur.  
Voir l'aide [theme_gouv_map()](https://spyrales.github.io/gouvdown/reference/theme_gouv.html).

```{r, echo=TRUE, eval=TRUE, fig.height=5, fig.width=12, warning=FALSE}
carte_ronds_prop2 +
  theme_gouv_map(plot_title_size = 20, subtitle_size = 12)
```


La fonction `theme_set()` vous permet de définir un thème par défaut pour l'ensemble de vos graphiques.

```{r, echo=TRUE, eval=TRUE, warning=FALSE, fig.height=5, fig.width=10}

theme_set(theme_gouv_map(plot_title_size = 20, subtitle_size = 12))

```


### Les scales

Les fonctions `scales()` permettent globalement de paramétrer ou étalonner les éléments rentrés dans l'aesthetic : 

- Si je veux un gradient de couleurs fonction d'une variable continue : quelle palette de couleurs je choisis, comment je cale mon dégradé en fonction de cette variable continue ?

- Si je met une variable continue en paramètre de transparence, comment je définis le minimum et maximum de cette transparence ou les valeurs que j'affiche sur l'échelle...


L'ensemble des scales possibles peuvent se décrire sous la forme suivante:

`scale_xx_yy()`

ou `xx` peut être un des paramètres de l'aesthétic : 

xx|description
-----------------|---
alpha|transparence
color|couleur des lignes ou des points
fill|couleurs des aires
linetype|type de ligne (continue,pointillée,...)
shape|forme des points
size|aire des points


Et `yy` un type de paramétrage :  

yy|description
-----------------|--------------------------
date|gérer une variable au format date 
reverse|inverser l'axe 
log|convertir l'échelle d'une variable continue en échelle logarithmique 
log10|convertir l'échelle d'une variable continue en échelle logarithmique décimale 
continuous|gérer les variables continue 
discrete|gérer les variables discrètes 
continuous_gouv|utiliser les palettes de `{gouvdown}` (Marque Etat) pour une variable continue
discrete_gouv|utiliser les palettes de `{gouvdown}` (Marque Etat) pour une variable catégorielle
gradient|utiliser un gradient de 2 couleurs
gradient2|utiliser un gradient divergent de 3 couleurs
viridis|utiliser une palette de couleur viridis
brewer|utiliser une palette de couleur brewer (variable discrète)
distiller|utiliser une palette de couleur brewer (variable continue)


`{gouvdown}` propose des fonctions scales_xx_yy() mobilisant les palettes de couleurs à la marque Etat :  
![](pic/palette.PNG)  

La [vignette _graph_gouv_ du site de présentation de {gouvdown}](https://spyrales.github.io/gouvdown/articles/graph_gouv.html) propose des exemples d'utilisation des palettes pour {ggplot2}.

```{r, echo=TRUE, eval=TRUE}
carte_ronds_prop2 +
  scale_color_gouv_continuous(palette = "pal_gouv_i", reverse = FALSE)

```

`{gouvdown}` propose également de récupérer le code hex des couleurs de la marque Etat grâce à la fonction `gouv_colors()`.

```{r}
gouv_colors("a1")
```

On peut utiliser cette fonction pour créer une palette à partir d'un gradient de couleurs : 

```{r}
carte_ronds_prop2 +
  scale_colour_gradient(low = gouv_colors("b1")[[1]], high = gouv_colors("p1")[[1]])

```


#### Formatage spécifique

Le formatage des valeurs des axes ou de la légende se fait à l'aide d'une fonction de formatage des nombres passée à l'argument 'labels' des fonctions `scale_xx_yy()`

- Transformation en pourcentage ;
```{r, echo=TRUE, eval=FALSE}
scale_color_continuous(labels = scales::percent)
```

### Ajouter une barre d'échelle et la flèche du nord

Le package `ggspatial` permet d'enrichir simplement nos cartes `ggplot2` avec une barre d'échelle et la flèche du nord.

Les deux fonctions qui permettent cela sont `annotation_scale()` et `annotation_north_arrow()`.

L'utilisation de ces fonctions nécessitent un système de coordonnées géographiques.

```{r, message=FALSE, warning=FALSE, fig.height=5, fig.width=12}
carte_ronds_prop2 +
  scale_color_gouv_continuous(palette = "pal_gouv_i", reverse = FALSE) +
  scale_size_continuous(labels = function(x) format(x, big.mark = " ", scientific = FALSE)) +
  annotation_scale(location = "br", line_width = .5) +
  annotation_north_arrow(location = "bl", height = unit(0.7, "cm"), width = unit(0.7, "cm"))
```


### Exporter sa carte

ggplot contient une fonction `ggsave()` qui permet d'exporter nos graphiques ou cartes dans les formats suivants : eps, ps, tex (pictex), pdf, jpeg, tiff, png, bmp, svg or wmf.  
